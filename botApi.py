import random
import requests
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import bdApi
from pivoParser import parsePyaterochka, parseMagnit, parseKb
from pivoParserSelenium import *


def uploadImages(images, offset, vk_session):
    session = requests.Session()
    attachments = []
    i = 0
    upload = vk_api.VkUpload(vk_session)
    while i < 10 and i + offset < len(images):
        image_url = images[i + offset]
        image = session.get(image_url, stream=True)
        photo = upload.photo_messages(photos=image.raw)[0]
        attachments.append(
            'photo{}_{}_{}'.format(photo['owner_id'], photo['id'], photo['access_key'])
        )
        i += 1
    return attachments


def getRandomBeerMessage(vk_session):
    beer = randomBeerParser()
    msg = "–ü–æ—á–µ–º—É –±—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã–ø–∏—Ç—å: \n"
    msg += "üç∫" + beer['name'] + '\n' + "‚≠ê" + beer['rating'] + "\n üí¨–û—Ç–∑—ã–≤—ã:\n" + beer['url']
    image_url = beer['image']
    session = requests.Session()
    upload = vk_api.VkUpload(vk_session)
    image = session.get(image_url, stream=True)
    photo = upload.photo_messages(photos=image.raw)[0]
    attachments = 'photo{}_{}_{}'.format(photo['owner_id'], photo['id'], photo['access_key'])
    vk.messages.send(
        random_id=random_id,
        chat_id=chat_id,
        message=msg,
        attachment=attachments
    )


def getName(id):
    payload = {'user_id': id, 'access_token': token, 'v': '5.124', 'lang': 1}
    response = requests.get("https://api.vk.com/method/users.get", params=payload)
    resp_keys = response.text.split(":")
    print(resp_keys)
    first_name = resp_keys[3]
    first_name = first_name.split(",")[0]
    first_name = first_name[1:]
    first_name = first_name[:-1]
    last_name = resp_keys[4]
    last_name = last_name.split(",")[0]
    last_name = last_name[1:]
    last_name = last_name[:-1]
    # return '@id' + str(id) + '(' + first_name + " " + last_name + ')'
    return first_name + " " + last_name


def getAll(current_chat_id):
    message = "–ü—Ä–∏–∑—ã–≤–∞—é –≤–∞—Å:\n"
    ids = []
    poll = bdApi.getPollByChatId(current_chat_id)
    if poll is None or poll == "NULL":
        return message
    for array in poll.values():
        if array is not None:
            for id in array:
                ids.append(id)
    ids = set(ids)
    for id in ids:
        message += "üßç" + getLink(id) + "\n"
    return message


def getLink(id):
    id = str(id)
    return "[id" + id + "|" + getName(id) + "] \n"


def getFavourites(user_id):
    msg = "–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–∏–≤–æ: \n"
    array = bdApi.getUsersFavourites(user_id)
    if array is None:
        return msg
    for element in array:
        msg += "&#12288;‚≠ê" + element + "\n"
    return msg


def byShopSort(t):
    return t['market']


def getFavouritesDiscounts(user_id, random_chat_id, current_chat_id):
    city = bdApi.getCity(user_id)
    msg = "–°–∫–∏–¥–∫–∏ –Ω–∞ –≤–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–∏–≤–æ –≤ –≥–æ—Ä–æ–¥–µ " + city + ":\n"
    array = bdApi.getUsersFavourites(user_id)
    i = 0
    if array is None:
        return msg
    for element in array:
        msg += "\n‚≠ê" + element + ":"
        discounts = byProductEdadealParser(element, city)
        discounts.sort(key=byShopSort)
        for disount in discounts:
            msg += "\n&#12288;üç∫üç∫" + disount['description'] + "\n " + "&#12288;üõíüõí" + disount[
                'market'] + "\n" + "&#12288;üí≤üí≤" + disount['priceNew'] + "\n"
        msg = msg[:4095]
        vk.messages.send(
            random_id=random_id + i,
            chat_id=current_chat_id,
            message=msg,
        )
        i += 1
        msg = ""

    return msg


def removeFromFavourites(user_id, fav_name):
    msg = "–£–¥–∞–ª–µ–Ω–æ: " + fav_name
    array = bdApi.getUsersFavourites(user_id)
    if array is None:
        return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    array = list(array)
    try:
        array.remove(name)
    except ValueError:
        return "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–∏–≤–∞ –≤ —Å–ø–∏–∫–µ"
    bdApi.updateUsersFavourites(user_id, array)
    return msg


def getPivniye(current_chat_id):
    ids = "\n"
    poll = bdApi.getPollByChatId(current_chat_id)
    if poll == "NULL" or poll is None:
        ids += "–ù–∏–∫—Ç–æ\n"
        return ids
    ids_set = set()
    for element in poll.values():
        if element is not None:
            ids_set.update(set(element))
    for id in ids_set:
        ids += "&#12288;üòã" + getName(id) + "\n"
    return ids


def getPollInfo(current_chat_id):
    info = "–ò–Ω—Ñ–æ –ø–æ –≥–æ–ª–æ—Å–∞–º: \n"
    poll = bdApi.getPollByChatId(current_chat_id)
    if poll is None or poll == "NULL":
        return "–ù–µ—Ç –æ–ø—Ä–æ—Å–∞"
    for time in poll.keys():
        if poll.get(time) is not None:
            info += "‚è±" + time + ": \n"
            for id in poll.get(time):
                info += "&#12288;üòã" + getName(id) + '\n'
            info += "\n"
    return info


def whoIs(message, members):
    index = random.randrange(0, len(members) - 1)
    print(members)
    while members[index]["member_id"] < 0:
        index = random.randrange(0, len(members) - 1)
    return "ü§î–û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ" + message + " " + getName(members[index]["member_id"])


def addPollValue(value, id, current_chat_id):
    ids = []
    poll = bdApi.getPollByChatId(current_chat_id)
    if value in poll.keys():
        ids = poll.get(value)
        if ids == None:
            ids = []
        if id in ids:
            return
    ids.append(id)
    poll.update({value: ids})
    bdApi.updatePoll(current_chat_id, poll)


def createPollMessage(time_from, time_to, current_chat_id):
    i = time_from
    poll_data = "–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
    time_data = ""
    time_values = []
    while i <= time_to:
        if int(i) != i:
            time_data = str(int(i)) + ":30"
        else:
            time_data = str(int(i)) + ":00"
        time_values.append(time_data)
        poll_data += time_data + "\n"
        i += 0.5
    time_values.append("–ù–µ –≤–∞–∂–Ω–æ")
    bdApi.updatePoll(current_chat_id, {key: None for key in time_values})
    return poll_data


def getVoteKeyboard(current_chat_id):
    settings = dict(one_time=False, inline=True)
    keyboard = VkKeyboard(**settings)
    poll = bdApi.getPollByChatId(current_chat_id)
    if poll is None or poll == "NULL":
        return None
    i = 0
    for time_value in poll.keys():
        i += 1
        keyboard.add_button(label=time_value, color=VkKeyboardColor.POSITIVE)
        if i % 3 == 0:
            keyboard.add_line()
    keyboard.add_button(label='–≥–æ–ª–æ—Å–∞ –∏–Ω—Ñ–æ', color=VkKeyboardColor.SECONDARY)
    keyboard.add_button(label='–∫—Ç–æ –∏–¥–µ—Ç', color=VkKeyboardColor.SECONDARY)

    return keyboard


def getPost(current_chat_id, random_id):
    data = {
        'access_token': service_token,
        'owner_id': -92876084,
        'v': '5.124'}
    r = requests.get('https://api.vk.com/method/wall.get', data).json()
    count = r['response']['count']
    while True:
        random_post = random.randrange(1, count)
        data = {
            'access_token': service_token,
            'owner_id': -92876084,
            'offset': random_post,
            'count': 1,
            'v': '5.124'}
        r = requests.get('https://api.vk.com/method/wall.get', data).json()
        post = r['response']['items'][0]
        if post['post_type'] == 'post' and post['text'] != '' and post['marked_as_ads'] == 0:
            break
    vk.messages.send(
        random_id=random_id,
        chat_id=current_chat_id,
        message='üòÇüòÇüòÇ–í–∞—à–∞ –Æ–º–æ—Ä–µ—Å–∫–∞:\n' + post['text'])


def getMashup(current_chat_id, random_id):
    data = {
        'access_token': service_token,
        'owner_id': -39786657,
        'v': '5.124'}
    r = requests.get('https://api.vk.com/method/wall.get', data).json()
    count = r['response']['count']
    while True:
        random_post = random.randrange(1, count)
        data = {
            'access_token': service_token,
            'owner_id': -39786657,
            'offset': random_post,
            'count': 1,
            'v': '5.124'}
        r = requests.get('https://api.vk.com/method/wall.get', data).json()
        post = r['response']['items'][0]
        post_mashups = list(filter(lambda attachment: attachment['type'] == 'audio', post['attachments']))
        if post['post_type'] == 'post' and post['marked_as_ads'] == 0 and len(post_mashups) > 0:
            break
    single_mashup = post_mashups[0]['audio']
    audio_attachment = 'audio{}_{}'.format(single_mashup['owner_id'], single_mashup['id'])
    vk.messages.send(
        random_id=random_id,
        chat_id=current_chat_id,
        message="üé∂üé∂üé∂–í–∞—à –º—ç—à–∞–ø:",
        attachment=audio_attachment)


def showPoll(current_chat_id, poll_keyboard):
    poll = bdApi.getPollByChatId(current_chat_id)
    if poll is None or poll_keyboard is None:
        vk.messages.send(
            random_id=random_id,
            chat_id=current_chat_id,
            message="–ù–µ—Ç –æ–ø—Ä–æ—Å–∞")
    else:

        vk.messages.send(
            random_id=random_id,
            chat_id=current_chat_id,
            message="–¢–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å",
            keyboard=poll_keyboard.get_keyboard()
        )


def showVoteInfoInDetails(current_chat_id):
    msg: str
    poll = bdApi.getPollByChatId(current_chat_id)
    if poll is None or poll == "NULL":
        msg = "–ù–µ—Ç –æ–ø—Ä–æ—Å–∞"
    else:
        msg = getPollInfo(current_chat_id)
    vk.messages.send(
        random_id=random_id,
        chat_id=current_chat_id,
        message=msg,
    )


def getPivoDrinkers(current_chat_id):
    msg = "–ò–¥—É—Ç –ø–∏—Ç—å –ø–∏–≤–æ :" + getPivniye(current_chat_id)
    vk.messages.send(
        random_id=random_id,
        chat_id=current_chat_id,
        message=msg,
    )


def addFavourite(user_id, fav_name):
    names = bdApi.getUsersFavourites(user_id)
    if names is None:
        names = []
    names.append('"' + fav_name + '"')
    bdApi.updateUsersFavourites(user_id, names)


def handleVote(current_chat_id, cur_time):
    msg: str
    poll = bdApi.getPollByChatId(current_chat_id)
    if poll is None:
        msg = "–ù–µ—Ç –æ–ø—Ä–æ—Å–∞"
    else:
        time = "empty"
        try:
            if cur_time not in poll.keys():
                msg = "–í—Ä–µ–º—è –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å–æ—Å–∏"
            else:
                addPollValue(cur_time, event.message.from_id, chat_id)
                msg = "–ü—Ä–∏–Ω—è–ª"
        except BaseException:
            msg = "–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è"
    vk.messages.send(
        random_id=random_id,
        chat_id=current_chat_id,
        message=msg,
    )


# API-–∫–ª—é—á —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ

token = os.environ.get('ACCESS_TOKEN')
service_token = os.environ.get('SERVICE_TOKEN')

# –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
os.environ['GROUP_ID'] = '199735512'
vk_session = vk_api.VkApi(token=token, api_version='5.124')
group_id = os.environ.get('GROUP_ID')
# –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
longpoll = VkBotLongPoll(vk_session, group_id)
vk = vk_session.get_api()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# FIXME [ZK]: –ø–∏–≤–æ–±–æ—Ç does not follows exact order of commands
for event in longpoll.listen():
    for event in longpoll.listen():
        print(event.chat_id)
        if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat and ("@public" + group_id) in str(event):
            poll = bdApi.getPollByChatId(chat_id)
            if poll is not None and str(event.message.text[33:]) in poll.keys():
                handleVote(chat_id, event.message.text[33:])
                continue
            if "–≥–æ–ª–æ—Å–∞ –∏–Ω—Ñ–æ" in str(event):
                showVoteInfoInDetails(chat_id)
                continue
            if "–∫—Ç–æ –∏–¥–µ—Ç" in str(event):
                getPivoDrinkers(chat_id)
                continue
        if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat and ("@club" + group_id) in str(event):
            poll = bdApi.getPollByChatId(chat_id)
            if poll is not None and str(event.message.text[31:]) in poll.keys():
                handleVote(chat_id, event.message.text[31:])
                continue
            if "–≥–æ–ª–æ—Å–∞ –∏–Ω—Ñ–æ" in str(event):
                showVoteInfoInDetails(chat_id)
                continue
            if "–∫—Ç–æ –∏–¥–µ—Ç" in str(event):
                getPivoDrinkers(chat_id)
                continue
        if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat and (
                "–ø–∏–≤–æ–±–æ—Ç " in str(event) or "–ü–∏–≤–æ–±–æ—Ç " in str(event)) and (event.message.text[1:7] == "–∏–≤–æ–±–æ—Ç"):
            random_id = random.randrange(10000, 90000)
            chat_id = int(event.chat_id)
            if "–æ–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞—Ç—å" in str(event):
                keyboard = getVoteKeyboard(chat_id)
                if keyboard is None:
                    vk.messages.send(
                        random_id=random_id,
                        chat_id=chat_id,
                        message="–ù–µ—Ç –æ–ø—Ä–æ—Å–∞",
                    )
                    continue
                showPoll(chat_id, keyboard)
                continue
            if "–ø–∏–≤–æ –ø–æ–ø–∏—Ç–æ" in str(event):
                bdApi.cleanPoll(chat_id)
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message="–í–µ–∑–µ—Ç)",
                )
            if "–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" in str(event):
                name = event.message.text[29::]
                addFavourite(event.message.from_id, name)
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message="–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                )
            if "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥" in str(event):
                city = event.message.text[25::]
                bdApi.updateCity(event.message.from_id, city)
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ " + city,
                )
            if "–ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" in str(event):
                message = getFavourites(event.message.from_id)
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message=message,
                )
            if "—Å–∫–∏–¥–∫–∏ –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" in str(event):
                getFavouritesDiscounts(event.message.from_id, random_id, chat_id)
                continue
            if "—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" in str(event):
                name = event.message.text[30::]
                message = removeFromFavourites(event.message.from_id, name)
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message=message,
                )
                continue
            if "–æ–±—â–∏–π —Å–±–æ—Ä" in str(event):
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message=getAll(chat_id),
                )
                continue
            if "—Å–ª—É—á–∞–π–Ω–æ–µ –ø–∏–≤–æ" in str(event):
                getRandomBeerMessage(vk)
                continue
            if "–∫—Ç–æ –∏–¥–µ—Ç" in str(event):
                getPivoDrinkers(chat_id)
                continue
            if "–∫—Ç–æ" in str(event):
                members = \
                    vk.messages.getConversationMembers(peer_id=2000000000 + event.chat_id, v=5.124, group_id=group_id)[
                        "items"]
                message = whoIs(event.message.text[11:], members)
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message=message,
                )
                continue
            if '–æ–ø—Ä–æ—Å –≤—Ä–µ–º—è' in str(event):
                time = "empty"
                try:
                    times = str(event.message.text).split("–æ–ø—Ä–æ—Å –≤—Ä–µ–º—è ")[1]
                    times = times.split(" ")
                    if int(times[0]) > int(times[1]) or int(times[1]) - int(times[0]) > 4:
                        vk.messages.send(
                            random_id=random_id,
                            chat_id=chat_id,
                            message="–¢—ã —á–µ –¥—É—Ä–∞–∫ —á—Ç–æ–ª–∏ –∞",
                        )
                        continue
                    createPollMessage(int(times[0]), int(times[1]), chat_id)
                    keyboard = getVoteKeyboard(chat_id)
                    showPoll(chat_id, keyboard)
                    continue
                except BaseException:
                    vk.messages.send(
                        random_id=random_id,
                        chat_id=chat_id,
                        message="–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è",
                    )

            if "–≥–æ–ª–æ—Å–∞ –∏–Ω—Ñ–æ" in str(event):
                showVoteInfoInDetails(chat_id)
                continue
            if "–ª—É—á—à–µ–µ –ø–∏–≤–æ" in str(event):
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message="–ö–æ–Ω–µ—á–Ω–æ –∂–µ –∏–ø–∞",
                )
                continue
            if "–æ—Ç–ø—Ä–∞–≤—å —é–º–æ—Ä–µ—Å–∫—É" in str(event):
                getPost(chat_id, random_id)
                continue
            if "–æ—Ç–ø—Ä–∞–≤—å –º—ç—à–∞–ø" in str(event):
                getMashup(chat_id, random_id)
                continue
            if "–∫–æ–º–∞–Ω–¥—ã" in str(event):
                message = ("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: \n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –∫—Ç–æ –∏–¥–µ—Ç - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –≥–æ—Ç–æ–≤ –∏–¥—Ç–∏ –ø–∏—Ç—å –ø–∏–≤–æ \n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –æ–ø—Ä–æ—Å –≤—Ä–µ–º—è #–≤—Ä–µ–º—è_–æ—Ç #–≤—Ä–µ–º—è_–¥–æ - –æ–ø—Ä–æ—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –æ–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞—Ç—å - –≤—ã–≤–æ–¥–∏—Ç –æ–ø—Ä–æ—Å\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç —Å–∫–∏–¥–∫–∞–æ–Ω–ª–∞–π–Ω #[–ø—è—Ç–µ—Ä–æ—á–∫–∞/–º–∞–≥–Ω–∏—Ç/–∫–±] - –∞–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ skidkaonline\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –µ–¥–∞–¥–∏–ª #[–ø—è—Ç–µ—Ä–æ—á–∫–∞/–º–∞–≥–Ω–∏—Ç/–∫–±] - –∞–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –µ–¥–∞–¥–∏–ª–∞\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –≥–æ–ª–æ—Å–∞ –∏–Ω—Ñ–æ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –ª—É—á—à–µ–µ –ø–∏–≤–æ - –ø–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–µ–µ –ø–∏–≤–æ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –∫—Ç–æ #—Ç–µ–∫—Å—Ç - –Ω—É –≤—ã –ø–æ–Ω—è–ª–∏\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ #–≥–æ—Ä–æ–¥ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫\n"
                           "P.s –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≤—ã–¥–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–Ω–∞—á–µ, –±–æ—Ç –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ #–Ω–∞–∑–≤–∞–Ω–∏–µ - –¥–æ–±–∞–≤–∏—Ç—å –ø–∏–≤–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ #–Ω–∞–≤–∑–∞–Ω–∏–µ - —É–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–∏–≤–æ\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç —Å–∫–∏–¥–∫–∏ –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - —Å–∫–∏–¥–∫–∏ –Ω–∞ –≤–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–∏–≤–æ\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø–∏–≤–æ - –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø–∏–≤–æ\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –æ—Ç–ø—Ä–∞–≤—å —é–º–æ—Ä–µ—Å–∫—É - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫\n"
                           "üçª–ø–∏–≤–æ–±–æ—Ç –æ—Ç–ø—Ä–∞–≤—å –º—ç—à–∞–ø - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º—ç—à–∞–ø\n"
                           )

                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message=message,
                )
                continue
            if "–µ–¥–∞–¥–∏–ª" in str(event):
                city = bdApi.getCity(event.message.from_id)
                message = '–ì–æ—Ä–æ–¥ ' + city + ":\n"
                if "–ø—è—Ç–µ—Ä–æ—á–∫–∞" in str(event):
                    products = edadeal_parser("5ka", city)
                    message += "üõí–°–∫–∏–¥–∫–∏ –≤ –ø—è—Ç–µ—Ä–æ—á–∫–µ: \n"
                elif "–º–∞–≥–Ω–∏—Ç" in str(event):
                    products = edadeal_parser("magnit-univer", city)
                    message += "üõí–°–∫–∏–¥–∫–∏ –≤ –º–∞–≥–Ω–∏—Ç–µ: \n "
                elif "–∫–±" in str(event):
                    products = edadeal_parser("krasnoeibeloe", city)
                    message += "üõí–°–∫–∏–¥–∫–∏ –≤ –∫–±: \n"
                else:
                    vk.messages.send(
                        random_id=random_id,
                        chat_id=chat_id,
                        message="–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞",
                    )
                    continue
                for product in products:
                    message += "üç∫üç∫" + product['description'] + " \n üí≤üí≤" + product['priceNew'] + "\n "
                vk.messages.send(
                    random_id=random_id,
                    chat_id=chat_id,
                    message=message,
                )
                continue

            if "—Å–∫–∏–¥–∫–∞–æ–Ω–ª–∞–π–Ω" in str(event):
                message = ''
                if "–ø—è—Ç–µ—Ä–æ—á–∫–∞" in str(event):
                    images = parsePyaterochka()
                    message = "–°–∫–∏–¥–∫–∏ –≤ –ø—è—Ç–µ—Ä–æ—á–∫–µ"
                elif "–º–∞–≥–Ω–∏—Ç" in str(event):
                    images = parseMagnit()
                    message = "–°–∫–∏–¥–∫–∏ –≤ –º–∞–≥–Ω–∏—Ç–µ "
                elif "–∫–±" in str(event):
                    products = parseKb()
                    message = "–°–∫–∏–¥–∫–∏ –≤ –∫–±: \n"
                    for product in products.keys():
                        message += product + " : " + products[product] + "—Ä \n"
                    vk.messages.send(
                        random_id=random_id,
                        chat_id=chat_id,
                        message=message,
                    )
                    continue
                else:
                    vk.messages.send(
                        random_id=random_id + i,
                        chat_id=chat_id,
                        message="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞",
                    )
                    continue
                length = len(images)
                i = 0
                while True:
                    attachments = uploadImages(images, i, vk)
                    vk.messages.send(
                        random_id=random_id + i,
                        chat_id=chat_id,
                        message=message,
                        attachment=','.join(attachments)
                    )
                    i += 10
                    if i > length:
                        break
                continue